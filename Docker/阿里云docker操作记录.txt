FROM 基础镜像				//基础镜像

ENV DATA_DIR /var/....	//定义一个变量

RUN chmod u+x install.sh	//执行chmod u+x install.sh 命令

ADD a.txt /tmp 			//将当前目录下的a.txt添加到镜像的/tmp中

EXPOSE	3306				//对外的接口

VOLUME	["/var/lib/mysql"]	//本机目录映射到docker的/var/lib/msyql目录； 例如：docker run -d -p 3306：3306(指定映射端口) -v /var/lib/docker/data:/var/lib/mysql csphere/mysql:5.5

ENTRYPOINT	["/script/start"]	//启动命令


#!/bin/base 开始后set -e 如果保存将终止
set -e 

连接私人阿里云镜像仓管
docker login --username=baying0230 registry.cn-hangzhou.aliyuncs.com
password: li*****10

手动构建
docker run -it centos //基于centos启动一个镜像
docker ps -a // 查看刚刚启动的centos镜像
docker commit -m "init centos" a2043debb872 registry.cn-hangzhou.aliyuncs.com/lijundong/dev:1.0.0  //提交 -m "备注"  a2043debb872为 docker ps -a 查处的ID lijundong/dev:v1.0.0为提交的分支 会产生一个：sha256:6887b78badb724c5058fe77fc62bfbcc87d5540d2eccd9ffe90c0fed6c7416c7
docker tag lijundong/dev:v1.0.0 registry.cn-hangzhou.aliyuncs.com/lijundong/dev:1.0.0 //建立一个tag registry.cn-hangzhou.aliyuncs.com/lijundong/dev:1.0.0为阿里云的镜像仓库
docker push registry.cn-hangzhou.aliyuncs.com/lijundong/dev:1.0.0 //将镜像推送到阿里云仓库


更新
docker run --name my_vim3 -it lijundong/my_vim:v3	 //基于lijundong/my_vim:v3 构建镜像，进入镜像后构建镜像环境
docker ps -a //退出后查看刚刚构造的镜像
docker commit -m "my_vim" 01f120a0a757 lijundong/my_vim:v5 //commit 提交刚刚构造的镜像 -m "提交备注" 01f120a0a757 为CONTAINER ID  lijundong/my_vim 镜像名 v5版本号
docker images //查看所有镜像列表，会出现刚刚提交的镜像
docker run -it lijundong/my_vim:v5 //运行镜像  lijundong/my_vim 镜像名，v5版本号


 删除none 镜像
 $ docker stop $(docker ps -a | grep "Exited" | awk '{print $1 }') //停止容器
 $ docker rm $(docker ps -a | grep "Exited" | awk '{print $1 }')  //删除容器 
 $ docker rmi $(docker images | grep "none" | awk '{print $3}')  //删除镜像 

删除所有ps出来的景象
docker rm $(docker ps -aq)

docker run -it -v /Users/jacky/Project/docker/vim:/data lijundong/my_vim:v5 /usr/bin/vim
docker run -it -w /home -v /Users/jacky/Project/docker/vim:/data lijundong/my_vim:v5
docker run -it -w /home -v /Users/jacky/Project/docker/vim:/home lijundong/my_vim:v5 /usr/bin/vim
docker run -w /home -v /Users/jacky/Project/zhaoyouwang/search/search-server-php:/home -it docker_vim:v1.1 sh -c /home/start.sh
docker run --name docker_vim_no_plugin -w /home -v /Users/jacky/Project/zhaoyouwang/search/search-server-php:/home -it docker_vim:v1.1 sh
docker run -w /home -v /Users/jacky/Project/zhaoyouwang/search/search-server-php:/home -it docker_vim:v1.3 sh -c /bin/start.sh

push 镜像
docker tag lijundong/my_vim:v6 jackylee92/vim //docker tag ${本地镜像名} ${远程仓库镜像名}
docker push jackylee92/vim  //docker push ${远程仓库镜像名}

阿里云docker
登录：sudo docker login --username=baying0230 registry.cn-hangzhou.aliyuncs.com
用于登录的用户名为阿里云账号全名，密码为开通服务时设置的密码。
您可以在产品控制台首页修改登录密码。

从Register拉取：
sudo docker pull registry.cn-hangzhou.aliyuncs.com/lijundong/vim:[镜像版本号]
目前版本：sudo docker pull registry.cn-hangzhou.aliyuncs.com/lijundong/docker_vim:v2.7
请根据实际镜像信息替换示例中的[ImageId]和[镜像版本号]参数。


将镜像推送到Registry
$ sudo docker login --username=baying0230 registry.cn-hangzhou.aliyuncs.com
$ sudo docker tag [ImageId] registry.cn-hangzhou.aliyuncs.com/lijundong/vim:[镜像版本号]
$ sudo docker push registry.cn-hangzhou.aliyuncs.com/lijundong/vim:[镜像版本号]

docker 服务器普通用户添加使用docker权限
ERROR:Got permission denied while trying to connect to the Docker daemon socket at unix:///var/run/docker.sock: Get http://%2Fvar%2Frun%2Fdocker.sock/v1.26/images/json: dial unix /var/run/docker.sock: connect: permission denied
groupadd docker //root用户添加docker组
gpasswd -a ${USER} docker //将user添加到docker组中
service docker restart //重启docker
newgrp - docker //切换当前会话到新 group 或者重启 X 会话 执行就对了
exit  login //退出重新登录 docker images 就能看到所有镜像了


docker run ：创建一个新的容器并运行一个命令
Usage: docker run [OPTIONS] IMAGE [COMMAND] [ARG...]  
  -a, --attach=[]            登录容器（以docker run -d启动的容器）  
  -c, --cpu-shares=0         设置容器CPU权重，在CPU共享场景使用  
  --cap-add=[]               添加权限，权限清单详见：http://linux.die.net/man/7/capabilities  
  --cap-drop=[]              删除权限，权限清单详见：http://linux.die.net/man/7/capabilities  
  --cidfile=""               运行容器后，在指定文件中写入容器PID值，一种典型的监控系统用法  
  --cpuset=""                设置容器可以使用哪些CPU，此参数可以用来容器独占CPU  
  -d, --detach=false         指定容器运行于前台还是后台   
  --device=[]                添加主机设备给容器，相当于设备直通  
  --dns=[]                   指定容器的dns服务器  
  --dns-search=[]            指定容器的dns搜索域名，写入到容器的/etc/resolv.conf文件  
  -e, --env=[]               指定环境变量，容器中可以使用该环境变量  
  --entrypoint=""            覆盖image的入口点  
  --env-file=[]              指定环境变量文件，文件格式为每行一个环境变量  
  --expose=[]                指定容器暴露的端口，即修改镜像的暴露端口  
  -h, --hostname=""          指定容器的主机名  
  -i, --interactive=false    打开STDIN，用于控制台交互  
  --link=[]                  指定容器间的关联，使用其他容器的IP、env等信息  
  --lxc-conf=[]              指定容器的配置文件，只有在指定--exec-driver=lxc时使用  
  -m, --memory=""            指定容器的内存上限  
  --name=""                  指定容器名字，后续可以通过名字进行容器管理，links特性需要使用名字  
  --net="bridge"             容器网络设置，待详述  
  -P, --publish-all=false    指定容器暴露的端口，待详述  
  -p, --publish=[]           指定容器暴露的端口，待详述  
  --privileged=false         指定容器是否为特权容器，特权容器拥有所有的capabilities  
  --restart=""               指定容器停止后的重启策略，待详述  
  --rm=false                 指定容器停止后自动删除容器(不支持以docker run -d启动的容器)  
  --sig-proxy=true           设置由代理接受并处理信号，但是SIGCHLD、SIGSTOP和SIGKILL不能被代理  
  -t, --tty=false            分配tty设备，该可以支持终端登录  
  -u, --user=""              指定容器的用户  
  -v, --volume=[]            给容器挂载存储卷，挂载到容器的某个目录  
  --volumes-from=[]          给容器挂载其他容器上的卷，挂载到容器的某个目录  
  -w, --workdir=""           指定容器的工作目录
  
  
阿里云code账户
username:sys1
Email:sys@bb-dd.com
Password:jacky@0230


yum install -y passwd openssl openssh-server
ssh-keygen -t rsa -f /etc/ssh/ssh_host_rsa_key
ssh-keygen -t ecdsa -f /etc/ssh/ssh_host_ecdsa_key
ssh-keygen -t ed25519 -f /etc/ssh/ssh_host_ed25519_key
passwd root